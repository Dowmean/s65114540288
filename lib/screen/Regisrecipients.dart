import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:io';
import 'package:image_picker/image_picker.dart';
import 'package:image/image.dart' as img; // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡πà‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û
import 'package:firebase_auth/firebase_auth.dart';
import 'package:loginsystem/screen/SelectAddress.dart'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Firebase Authentication

class RegisrecipientsScreen extends StatefulWidget {
  @override
  _RegisrecipientsScreenState createState() => _RegisrecipientsScreenState();
}

class _RegisrecipientsScreenState extends State<RegisrecipientsScreen> {
  final _formKey = GlobalKey<FormState>();

  // Text editing controllers for first form
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _firstNameController = TextEditingController();
  final TextEditingController _lastNameController = TextEditingController();
  final TextEditingController _phoneNumberController = TextEditingController();
  final TextEditingController _addressController = TextEditingController();

  // Text editing controllers for second form
  final TextEditingController _bankNameController = TextEditingController();
  final TextEditingController _accountNameController = TextEditingController();
  final TextEditingController _accountNumberController =
      TextEditingController();

  bool _showSecondForm = false;
  String? _firebaseUid;

  @override
  void initState() {
    super.initState();
    _getFirebaseUid(); // ‡∏î‡∏∂‡∏á firebase_uid ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
    _getEmail().then((email) {
      if (email != null && email.isNotEmpty) {
        _fetchDefaultAddress(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î email ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      } else {
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î email ‡πÑ‡∏î‡πâ");
      }
    });
  }

  Future<void> _getFirebaseUid() async {
    User? user = FirebaseAuth.instance.currentUser;
    setState(() {
      _firebaseUid = user?.uid;
    });
    //print("Firebase UID: $_firebaseUid"); // Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ firebase_uid
  }

  Future<String?> _getEmail() async {
    final User? user = FirebaseAuth.instance.currentUser;
    return user?.email; // ‚úÖ ‡∏î‡∏∂‡∏á email
  }

  Future<void> _fetchDefaultAddress() async {
    final User? user = FirebaseAuth.instance.currentUser;
    final String? email = user?.email; // ‚úÖ ‡πÉ‡∏ä‡πâ email

    if (email == null || email.isEmpty) {
      print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Email - ‡∏î‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ");
      return;
    }

    print("üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: $email");

    final response = await http
        .get(Uri.parse('http://10.0.2.2:3000/addresses/default/$email'));

    print("üìå API Response: ${response.body}"); // üî• Debug API Response

    if (response.statusCode == 200) {
      final data = json.decode(response.body);

      if (data.isNotEmpty) {
        setState(() {
          _addressController.text =
              "${data['address_detail']}, ${data['subdistrict']}, ${data['district']}, ${data['province']}, ${data['postal_code']}";
        });
        print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${_addressController.text}");
      } else {
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô");
      }
    } else {
      print("‚ùå API Error: ${response.statusCode} ${response.body}");
    }
  }

  @override
  void dispose() {
    _titleController.dispose();
    _firstNameController.dispose();
    _lastNameController.dispose();
    _phoneNumberController.dispose();
    _addressController.dispose();
    _bankNameController.dispose();
    _accountNameController.dispose();
    _accountNumberController.dispose();
    super.dispose();
  }

  void _selectTitle() {
    showDialog(
      context: context,
      builder: (context) {
        return SimpleDialog(
          title: Text("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤"),
          children: [
            SimpleDialogOption(
              onPressed: () {
                setState(() {
                  _titleController.text = '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß';
                });
                Navigator.pop(context);
              },
              child: Text("‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß"),
            ),
            SimpleDialogOption(
              onPressed: () {
                setState(() {
                  _titleController.text = '‡∏ô‡∏≤‡∏¢';
                });
                Navigator.pop(context);
              },
              child: Text("‡∏ô‡∏≤‡∏¢"),
            ),
          ],
        );
      },
    );
  }

  void _selectBank() {
    showDialog(
      context: context,
      builder: (context) {
        return SimpleDialog(
          title: Text("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£"),
          children: [
            SimpleDialogOption(
              onPressed: () {
                setState(() {
                  _bankNameController.text = '‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢';
                });
                Navigator.pop(context);
              },
              child: Text("‡∏Å‡∏£‡∏∏‡∏á‡πÑ‡∏ó‡∏¢"),
            ),
            SimpleDialogOption(
              onPressed: () {
                setState(() {
                  _bankNameController.text = '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û';
                });
                Navigator.pop(context);
              },
              child: Text("‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û"),
            ),
            SimpleDialogOption(
              onPressed: () {
                setState(() {
                  _bankNameController.text = '‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢';
                });
                Navigator.pop(context);
              },
              child: Text("‡∏Å‡∏™‡∏¥‡∏Å‡∏£‡πÑ‡∏ó‡∏¢"),
            ),
            SimpleDialogOption(
              onPressed: () {
                setState(() {
                  _bankNameController.text = '‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå';
                });
                Navigator.pop(context);
              },
              child: Text("‡πÑ‡∏ó‡∏¢‡∏û‡∏≤‡∏ì‡∏¥‡∏ä‡∏¢‡πå"),
            ),
            SimpleDialogOption(
              onPressed: () {
                setState(() {
                  _bankNameController.text = '‡∏ò‡∏ô‡∏ä‡∏≤‡∏ï';
                });
                Navigator.pop(context);
              },
              child: Text("‡∏ò‡∏ô‡∏ä‡∏≤‡∏ï"),
            ),
            SimpleDialogOption(
              onPressed: () {
                setState(() {
                  _bankNameController.text = '‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô';
                });
                Navigator.pop(context);
              },
              child: Text("‡∏≠‡∏≠‡∏°‡∏™‡∏¥‡∏ô"),
            ),
          ],
        );
      },
    );
  }

  Future<void> _submitForm() async {
    if (_formKey.currentState!.validate()) {
      if (_showSecondForm) {
        final data = {
          "firebase_uid": _firebaseUid,
          "title": _titleController.text,
          "firstName": _firstNameController.text,
          "lastName": _lastNameController.text,
          "phoneNumber": _phoneNumberController.text,
          "address": _addressController.text,
          "bankName": _bankNameController.text,
          "accountName": _accountNameController.text,
          "accountNumber": _accountNumberController.text
        }; //print(data); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å

        final response = await http.post(
          Uri.parse("http://10.0.2.2:3000/saveUserData"),
          headers: {'Content-Type': 'application/json'},
          body: json.encode(data),
        );

        if (response.statusCode == 200) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')),
          );
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')),
          );
        }
      } else {
        setState(() {
          _showSecondForm = true;
        });
      }
    }
  }

Widget _buildAddressField() {
  return GestureDetector(
    onTap: () async {
      final selectedAddress = await Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => SelectAddressScreen()),
      );

      if (selectedAddress != null) {
        setState(() {
          _addressController.text =
              "${selectedAddress['address_detail']}, ${selectedAddress['subdistrict']}, ${selectedAddress['district']}, ${selectedAddress['province']}, ${selectedAddress['postal_code']}";
        });
      }
    },
    child: Card(
      margin: EdgeInsets.symmetric(vertical: 10),
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      child: Padding(
        padding: const EdgeInsets.all(12.0),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Icon(Icons.location_on, color: Colors.red),
            SizedBox(width: 8),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    _firstNameController.text.isNotEmpty
                        ? "${_firstNameController.text} ${_lastNameController.text}"
                        : "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà",
                    style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                  ),
                  SizedBox(height: 5),
                  Text(
                    _phoneNumberController.text.isNotEmpty
                        ? "(${_phoneNumberController.text})"
                        : "",
                    style: TextStyle(color: Colors.grey),
                  ),
                  SizedBox(height: 5),
                  Text(
                    _addressController.text.isNotEmpty
                        ? _addressController.text
                        : "‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà",
                    style: TextStyle(fontSize: 14, color: Colors.black54),
                  ),
                ],
              ),
            ),
            Icon(Icons.chevron_right, color: Colors.grey),
          ],
        ),
      ),
    ),
  );
}


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: false,
        centerTitle: true,
        title: Text("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß"),
        backgroundColor: Colors.white,
        elevation: 0,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              if (!_showSecondForm) ...[
                Text(
                  "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå",
                  style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.pink),
                ),
                SizedBox(height: 16),
                GestureDetector(
                  onTap: _selectTitle,
                  child: AbsorbPointer(
                    child: _buildInputField(
                        "‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤", _titleController, "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤"),
                  ),
                ),
                _buildInputField(
                    "‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á", _firstNameController, "‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á"),
                _buildInputField("‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", _lastNameController, "‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"),
                _buildInputField("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", _phoneNumberController,
                    "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"),
                _buildAddressField(),
              ] else ...[
                Text(
                  "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£",
                  style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.pink),
                ),
                SizedBox(height: 16),
                GestureDetector(
                  onTap: _selectBank,
                  child: AbsorbPointer(
                    child: _buildInputField(
                        "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£", _bankNameController, "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£"),
                  ),
                ),
                _buildInputField(
                    "‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£", _accountNameController, "‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"),
                _buildInputField("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£", _accountNumberController,
                    "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"),
              ],
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _submitForm,
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.pink,
                  minimumSize: Size(double.infinity, 50),
                ),
                child: Text(
                  _showSecondForm ? "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô" : "‡∏ñ‡∏±‡∏î‡πÑ‡∏õ",
                  style: TextStyle(color: Colors.white, fontSize: 18),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildInputField(
      String label, TextEditingController controller, String hintText,
      {int maxLines = 1}) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: TextFormField(
        controller: controller,
        maxLines: maxLines,
        validator: (value) {
          if (value == null || value.isEmpty) {
            return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å $label';
          }
          return null;
        },
        decoration: InputDecoration(
          labelText: label,
          hintText: hintText,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8),
          ),
        ),
      ),
    );
  }
}
