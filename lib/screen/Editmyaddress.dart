import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:firebase_auth/firebase_auth.dart';

class EditMyAddressScreen extends StatefulWidget {
  final int addressId; // ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ ID ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç

  const EditMyAddressScreen({super.key, required this.addressId});

  @override
  _EditMyAddressScreenState createState() => _EditMyAddressScreenState();
}

class _EditMyAddressScreenState extends State<EditMyAddressScreen> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController nameController = TextEditingController();
  final TextEditingController phoneController = TextEditingController();
  final TextEditingController addressDetailController = TextEditingController();

  String? selectedProvince;
  String? selectedDistrict;
  String? selectedSubdistrict;
  String? postalCode = "-";
  bool isDefault = false;
  String addressType = "‡∏ö‡πâ‡∏≤‡∏ô";
  bool isLoading = true;

  List<dynamic> provinces = [];
  List<dynamic> districts = [];
  List<dynamic> subdistricts = [];
  List<String> addressTypes = ["‡∏ö‡πâ‡∏≤‡∏ô", "‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"];

  final String baseUrl = 'http://10.0.2.2:3000';
  final String firebaseUid = FirebaseAuth.instance.currentUser!.uid;

  @override
  void initState() {
    super.initState();
    _fetchAddress();
    fetchProvinces();
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  Future<void> _fetchAddress() async {
    try {
      final response =
          await http.get(Uri.parse('$baseUrl/addresses/id/${widget.addressId}'));

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
setState(() {
  nameController.text = data["name"] ?? "";
  phoneController.text = data["phone"] ?? "";
  addressDetailController.text = data["address_detail"] ?? "";
  selectedProvince = data["province"] != null ? data["province"].toString() : "";
  selectedDistrict = data["district"] != null ? data["district"].toString() : "";
  selectedSubdistrict = data["subdistrict"] != null ? data["subdistrict"].toString() : "";
  postalCode = data["postal_code"] != null ? data["postal_code"].toString() : "-";
  isDefault = data["is_default"] == 1;
  addressType = data["address_type"] ?? "‡∏ö‡πâ‡∏≤‡∏ô";
  isLoading = false;
});


        if (selectedProvince != null) fetchDistricts(selectedProvince!);
        if (selectedDistrict != null) fetchSubdistricts(selectedDistrict!);
      } else {
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç");
      }
    } catch (e) {
      print("‚ùå Error fetching address: $e");
    }
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
  Future<void> fetchProvinces() async {
    final response = await http.get(Uri.parse('$baseUrl/provinces'));
    if (response.statusCode == 200) {
      setState(() {
        provinces = json.decode(response.body);
      });
    }
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≥‡πÄ‡∏†‡∏≠
  Future<void> fetchDistricts(String provinceId) async {
    final response = await http.get(Uri.parse('$baseUrl/amphures/$provinceId'));
    if (response.statusCode == 200) {
      setState(() {
        districts = json.decode(response.body);
      });

      if (selectedDistrict != null) {
        fetchSubdistricts(selectedDistrict!);
      }
    }
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡∏ö‡∏•
  Future<void> fetchSubdistricts(String districtId) async {
    final response = await http.get(Uri.parse('$baseUrl/districts/$districtId'));
    if (response.statusCode == 200) {
      setState(() {
        subdistricts = json.decode(response.body);
        if (selectedSubdistrict != null) {
          updatePostalCode(selectedSubdistrict!);
        }
      });
    }
  }

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡∏ö‡∏•
  void updatePostalCode(String subdistrictName) {
    final subdistrict = subdistricts.firstWhere(
      (s) => s["name_th"] == subdistrictName,
      orElse: () => {"zip_code": "-"},
    );

    setState(() {
      postalCode = subdistrict["zip_code"].toString();
    });
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
Future<void> updateAddress() async {
  if (!_formKey.currentState!.validate()) return;

  final requestData = {
    "firebase_uid": firebaseUid,
    "name": nameController.text.isEmpty ? null : nameController.text,
    "phone": phoneController.text.isEmpty ? null : phoneController.text,
    "address_detail": addressDetailController.text.isEmpty ? null : addressDetailController.text,
    "province": selectedProvince == null || selectedProvince!.isEmpty ? null : selectedProvince,
    "district": selectedDistrict == null || selectedDistrict!.isEmpty ? null : selectedDistrict,
    "subdistrict": selectedSubdistrict == null || selectedSubdistrict!.isEmpty ? null : selectedSubdistrict,
    "postal_code": postalCode == null || postalCode!.isEmpty ? null : postalCode,
    "is_default": isDefault,
    "address_type": addressType.isEmpty ? "‡∏ö‡πâ‡∏≤‡∏ô" : addressType, // ‚úÖ Ensure it's not empty
  };

  print("üìå Request Data: $requestData"); // ‚úÖ Debugging line

  final response = await http.put(
    Uri.parse('$baseUrl/addresses/${widget.addressId}'),
    headers: {"Content-Type": "application/json"},
    body: jsonEncode(requestData),
  );

  print("üìå API Response: ${response.body}"); // ‚úÖ Debugging line

  if (response.statusCode == 200) {
    Navigator.pop(context, true);
  } else {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${response.body}")),
    );
  }
}




  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà")),
      body: isLoading
          ? const Center(child: CircularProgressIndicator())
          : Padding(
              padding: const EdgeInsets.all(16.0),
              child: Form(
                key: _formKey,
                child: ListView(
                  children: [
                    TextFormField(
                      controller: nameController,
                      decoration: const InputDecoration(labelText: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö"),
                      validator: (value) => value!.isEmpty ? "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠" : null,
                    ),
                    const SizedBox(height: 10),
                    TextFormField(
                      controller: phoneController,
                      keyboardType: TextInputType.phone,
                      decoration: const InputDecoration(labelText: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"),
                      validator: (value) => value!.isEmpty ? "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå" : null,
                    ),
                    const SizedBox(height: 10),
DropdownButtonFormField<String>(
  value: selectedProvince ?? "", // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô null
  items: provinces.map<DropdownMenuItem<String>>((province) {
    return DropdownMenuItem<String>(
      value: province["id"].toString(),
      child: Text(province["name_th"]),
    );
  }).toList(),
  onChanged: (newValue) {
    setState(() {
      selectedProvince = newValue;
      fetchDistricts(newValue!);
    });
  },
  decoration: const InputDecoration(labelText: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"),
                    ),
                    const SizedBox(height: 10),
                    DropdownButtonFormField<String>(
                      value: selectedDistrict,
                      items: districts.map<DropdownMenuItem<String>>((district) {
                        return DropdownMenuItem<String>(
                          value: district["id"].toString(),
                          child: Text(district["name_th"]),
                        );
                      }).toList(),
                      onChanged: (newValue) {
                        setState(() {
                          selectedDistrict = newValue;
                          fetchSubdistricts(newValue!);
                        });
                      },
                      decoration: const InputDecoration(labelText: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï"),
                    ),
                    const SizedBox(height: 10),
                    DropdownButtonFormField<String>(
                      value: selectedSubdistrict,
                      items: subdistricts.map<DropdownMenuItem<String>>((subdistrict) {
                        return DropdownMenuItem<String>(
                          value: subdistrict["name_th"],
                          child: Text(subdistrict["name_th"]),
                        );
                      }).toList(),
                      onChanged: (newValue) {
                        setState(() {
                          selectedSubdistrict = newValue;
                          updatePostalCode(newValue!);
                        });
                      },
                      decoration: const InputDecoration(labelText: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á"),
                    ),
                    const SizedBox(height: 10),
                    Text("‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå: ${postalCode ?? '-'}"),
                    SwitchListTile(
                      title: const Text("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô"),
                      value: isDefault,
                      onChanged: (value) {
                        setState(() {
                          isDefault = value;
                        });
                      },
                    ),
                                  // üîπ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
              const Text("‡∏ï‡∏¥‡∏î‡∏õ‡πâ‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô:"),
Wrap(
  spacing: 10,
  children: addressTypes.map((type) {
    return ChoiceChip(
      label: Text(type),
      selected: addressType == type,
      onSelected: (selected) {
        setState(() {
          addressType = type;
        });
      },
    );
  }).toList(),
              ),
                    const SizedBox(height: 20),
                    ElevatedButton(
                      onPressed: updateAddress,
                      child: const Text("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á"),
                    ),
                  ],
                ),
              ),
            ),
    );
  }
}
