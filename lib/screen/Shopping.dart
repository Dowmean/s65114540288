import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:http/http.dart' as http;
import 'package:loginsystem/screen/Myaddress.dart';
import 'package:loginsystem/screen/Payment.dart';
import 'package:loginsystem/screen/SelectAddress.dart';

class OrderPage extends StatefulWidget {
  final int productId; // ‡∏£‡∏±‡∏ö productId ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

  OrderPage({required this.productId}); // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå product

  @override
  _OrderPageState createState() => _OrderPageState();
}
class _OrderPageState extends State<OrderPage> {
  final TextEditingController nameController = TextEditingController();
  final TextEditingController addressController = TextEditingController();
  final TextEditingController phoneController = TextEditingController();
  final TextEditingController noteController = TextEditingController();
  int quantity = 1; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  double total = 0.0; // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°
  String email = '';
  Map<String, dynamic>? product; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  final String baseUrl = 'http://10.0.2.2:3000'; // URL ‡∏Ç‡∏≠‡∏á backend

  @override
  void initState() {
    super.initState();
    _fetchEmail();
    _fetchProduct(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å API
    _initializeData(); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ó‡∏ô
  }
  
Future<void> _initializeData() async {
  await _fetchEmail(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î email ‡∏Å‡πà‡∏≠‡∏ô
  if (email.isNotEmpty) {
    await _fetchDefaultAddress(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ email
  }
  
  _fetchProduct(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
}
Future<void> _fetchEmail() async {
  final User? user = FirebaseAuth.instance.currentUser;
  if (user != null) {
    setState(() {
      email = user.email ?? '';
      nameController.text = user.displayName ?? '';
    });

    print("üìå ‡πÇ‡∏´‡∏•‡∏î email: $email"); // Debug ‡∏î‡∏π‡∏ß‡πà‡∏≤ email ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á

    if (email.isNotEmpty) {
      _fetchDefaultAddress(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å email ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î
    }
  }
}


Future<void> _fetchDefaultAddress() async {
  if (email.isEmpty) return;

  print("üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: $email"); // ‚úÖ Debug

  final response = await http.get(Uri.parse('$baseUrl/addresses/default/$email'));

  print("üìå API Response: ${response.body}"); // ‚úÖ ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏£‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤

  if (response.statusCode == 200) {
    final data = json.decode(response.body);
    if (data.isNotEmpty) {
      setState(() {
        nameController.text = data['name'] ?? ''; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
        addressController.text = "${data['address_detail']}, ${data['subdistrict']}, ${data['district']}, ${data['province']}, ${data['postal_code']}";
        phoneController.text = data['phone'] ?? ''; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤ null
      });

      print("üìå ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${addressController.text}");
    } else {
      print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô");
    }
  } else {
    print("‚ùå API Error: ${response.statusCode}");
  }
}






Future<void> _fetchProduct() async {
  try {
    final response =
        await http.get(Uri.parse('$baseUrl/product/${widget.productId}'));

    if (response.statusCode == 200) {
      final data = json.decode(response.body);
      setState(() {
        product = data;
        final double price = double.tryParse(product!['price'].toString()) ?? 0.0;
        final double shipping = double.tryParse(product!['shipping'].toString()) ?? 0.0;
        final double carry = double.tryParse(product!['carry'].toString()) ?? 0.0;

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì total ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
        total = (price * quantity) + shipping + carry;
      });
    } else {
      //print('Failed to fetch product: ${response.body}');
    }
  } catch (e) {
    //print('Error fetching product: $e');
  }
}


void _updateTotal() {
  setState(() {
    final double price = double.tryParse(product!['price'].toString()) ?? 0.0;
    final double shipping = double.tryParse(product!['shipping'].toString()) ?? 0.0;
    final double carry = double.tryParse(product!['carry'].toString()) ?? 0.0;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì total ‡πÉ‡∏´‡∏°‡πà
    total = (price * quantity) + shipping + carry;
  });
}

Future<void> _createOrder(BuildContext context) async {
  if (product == null) return;

  print("üìå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠...");
  print("üìå email: $email");
  print("üìå name: ${nameController.text}");
  print("üìå address: ${addressController.text}");
  print("üìå phone: ${phoneController.text}");

  if (email.isEmpty || nameController.text.isEmpty || addressController.text.isEmpty || phoneController.text.isEmpty) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')),
    );
    return;
  }

  final double price = double.tryParse(product!['price'].toString()) ?? 0.0;
  final double shipping = double.tryParse(product!['shipping'].toString()) ?? 0.0;
  final double carry = double.tryParse(product!['carry'].toString()) ?? 0.0;

  final double calculatedTotal = (price * quantity) + shipping + carry;

  final orderData = {
    'email': email,
    'name': nameController.text,
    'address': addressController.text,
    'phone_number': phoneController.text,
    'total': calculatedTotal,
    'num': quantity,
    'note': noteController.text,
    'product_id': widget.productId,
    'image': product!['imageUrl'],
  };

  try {
    final response = await http.post(
      Uri.parse('$baseUrl/createOrder'),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode(orderData),
    );

    if (response.statusCode == 201) {
      print("‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => PaymentPage(
            orderId: json.decode(response.body)['orderId'],
            total: calculatedTotal,
          ),
        ),
      );
    } else {
      print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ: ${response.body}");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ: ${response.body}')),
      );
    }
  } catch (e) {
    print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e");
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e')),
    );
  }
}



@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: Text('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠'),
      backgroundColor: Colors.pink,
    ),
    body: product == null
        ? Center(child: CircularProgressIndicator())
        : SingleChildScrollView(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
Card(
  margin: EdgeInsets.only(bottom: 16.0),
  child: Padding(
    padding: const EdgeInsets.all(16.0),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text('üìç ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á', style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),

            TextButton(
              onPressed: () async {
                final selectedAddress = await Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => SelectAddressScreen()),
                );

                if (selectedAddress != null && selectedAddress.isNotEmpty) {
                  setState(() {
                    nameController.text = selectedAddress['name'] ?? ''; // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
                    addressController.text =
                        "${selectedAddress['address_detail']}, ${selectedAddress['subdistrict']}, ${selectedAddress['district']}, ${selectedAddress['province']}, ${selectedAddress['postal_code']}";
                    phoneController.text = selectedAddress['phone'] ?? ''; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô phone ‡πÄ‡∏õ‡πá‡∏ô null
                  });

                  print("üìå ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${nameController.text}");
                  print("üìå ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${addressController.text}");
                }
              },
              child: Text('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà', style: TextStyle(color: Colors.blue)),
            ),
          ],
        ),
        SizedBox(height: 8),

        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
        nameController.text.isNotEmpty
            ? Text("üë§ ${nameController.text}", style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold))
            : SizedBox.shrink(),

        SizedBox(height: 5),

        // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
        addressController.text.isNotEmpty
            ? Text(addressController.text, style: TextStyle(fontSize: 14))
            : Text("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà", style: TextStyle(fontSize: 14, color: Colors.red)),
      ],
    ),
  ),
),


                // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                Card(
                  margin: EdgeInsets.only(bottom: 16.0),
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Row(
                      children: [
                        // ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                        Container(
                          width: 80,
                          height: 80,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(8.0),
                            image: DecorationImage(
                              image: NetworkImage(product!['imageUrl']),
                              fit: BoxFit.cover,
                            ),
                          ),
                        ),
                        SizedBox(width: 16),
                        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                product!['productName'],
                                style: TextStyle(
                                    fontSize: 16, fontWeight: FontWeight.bold),
                              ),
                              SizedBox(height: 8),
                              Text(
                                '‡∏ø${(double.tryParse(product!['price'].toString()) ?? 0.0).toStringAsFixed(2)}',
                                style: TextStyle(
                                    fontSize: 16, color: Colors.pink),
                              ),
                              SizedBox(height: 8),
                              Text(
                                '‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á: ‡∏ø${(double.tryParse(product!['shipping'].toString()) ?? 0.0).toStringAsFixed(2)}',
                                style: TextStyle(
                                    fontSize: 14, color: Colors.grey[600]),
                              ),
                              Text(
                                '‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: ‡∏ø${(double.tryParse(product!['carry'].toString()) ?? 0.0).toStringAsFixed(2)}',
                                style: TextStyle(
                                    fontSize: 14, color: Colors.grey[600]),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', style: TextStyle(fontSize: 16)),
                    Row(
                      children: [
                        IconButton(
                          icon: Icon(Icons.remove_circle_outline),
                          onPressed: () {
                            if (quantity > 1) {
                              setState(() {
                                quantity--;
                                _updateTotal();
                              });
                            }
                          },
                        ),
                        Text('$quantity', style: TextStyle(fontSize: 18)),
                        IconButton(
                          icon: Icon(Icons.add_circle_outline),
                          onPressed: () {
                            setState(() {
                              quantity++;
                              _updateTotal();
                            });
                          },
                        ),
                      ],
                    ),
                  ],
                ),
                SizedBox(height: 16),
                // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°
                Text(
                  '‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: ‡∏ø${total.toStringAsFixed(2)}',
                  style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Colors.pink),
                ),
                SizedBox(height: 16),
                // ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
                ElevatedButton(
                  onPressed: () {
                    if (addressController.text.isEmpty ||
                        phoneController.text.isEmpty ||
                        nameController.text.isEmpty) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô')),
                      );
                      return;
                    }
                    _createOrder(context);
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.pink,
                    padding: EdgeInsets.symmetric(vertical: 16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8.0),
                    ),
                  ),
                  child: Center(
                    child: Text(
                      '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠',
                      style: TextStyle(fontSize: 18, color: Colors.white),
                    ),
                  ),
                ),
              ],
            ),
          ),
  );
}

}
