import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';
import 'package:loginsystem/screen/AllOrdersuccessfu.dart';
import 'package:loginsystem/screen/IncomeRecipient.dart';
import 'package:loginsystem/screen/OrderHistory.dart';
import 'package:loginsystem/screen/Orderscancle.dart';
import 'package:loginsystem/screen/Ownorder.dart';
import 'package:loginsystem/screen/PaymentComplet.dart';
import 'package:loginsystem/screen/PendingPayment.dart';
import 'package:loginsystem/screen/Receiving.dart';
import 'package:loginsystem/screen/Regisrecipients.dart';
import 'package:loginsystem/screen/Review.dart';
import 'package:loginsystem/screen/Setting.dart';
import 'package:loginsystem/screen/Shipping.dart';
import 'package:loginsystem/screen/Topay.dart';
import 'package:loginsystem/screen/UserList.dart';
import 'package:loginsystem/screen/Requirement.dart';
import 'package:loginsystem/screen/RecipientsList.dart';
import 'ProfileSetting.dart';

class ProfileScreen extends StatefulWidget {
  @override
  _ProfileScreenState createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  final User? user = FirebaseAuth.instance.currentUser;
  String username = '';
  String gender = '';
  String birthDate = '';
  String email = '';
  String profilePictureUrl = '';
  String? currentUserRole;
  double totalIncome = 0.0;
String firstShopDate = '';
String lastShopDate = '';



  @override
  void initState() {
    super.initState();
    email = user?.email ?? '';

    _fetchUserData();
    fetchUserRole(email).then((role) {
      setState(() {
        currentUserRole = role;
      });

    if (role == 'Recipient') {
      fetchIncomeDetails().then((incomeData) {
        setState(() {
          totalIncome = incomeData['totalIncome'];
          firstShopDate = incomeData['firstShopDate'];
          lastShopDate = incomeData['lastShopDate'];
        });
      });
    }
    });
  }

  Future<void> _fetchUserData() async {
    try {
      final response = await http.get(
        Uri.parse('http://10.0.2.2:3000/getUserProfile?email=$email'),
      );

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        setState(() {
          username = data['username'] ?? '';
          gender = data['gender'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
          birthDate = data['birth_date'] ?? '';
          profilePictureUrl = data['profile_picture'] ?? '';
        });
      } 
    } catch (e) {
     
    }
  }

  Future<String?> fetchUserRole(String email) async {
    final url = 'http://10.0.2.2:3000/getUserRole?email=$email';
    try {
      final response = await http.get(Uri.parse(url));
      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        return data['role'];
      } else {
        
        return null;
      }
    } catch (e) {
      
      return null;
    }
  }

Future<Map<String, dynamic>> fetchIncomeDetails() async {
  try {
    final response = await http.get(
      Uri.parse('http://10.0.2.2:3000/recipients/${user!.uid}/ALLincome'),
    );

    //print('Response Body: ${response.body}'); // üõ† Debug ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API

    if (response.statusCode == 200) {
      final data = json.decode(response.body);

      if (data is Map<String, dynamic>) {
        return {
          'totalIncome': double.tryParse(data['totalIncome'].toString()) ?? 0.0,
          'firstShopDate': data['firstShopDate'] ?? '',
          'lastShopDate': data['lastShopDate'] ?? '',
        };
      }
    }

    return {'totalIncome': 0.0, 'firstShopDate': '', 'lastShopDate': ''};
  } catch (e) {
    //print('Error fetching income data: $e');
    return {'totalIncome': 0.0, 'firstShopDate': '', 'lastShopDate': ''};
  }
}




Widget _displayProfileImage() {
  if (profilePictureUrl.isNotEmpty) {
    return CircleAvatar(
      radius: 35,
      backgroundImage: NetworkImage(profilePictureUrl),
      onBackgroundImageError: (exception, stackTrace) {
        
      },
    );
  } else {
    return CircleAvatar(
      radius: 35,
      backgroundImage: AssetImage('assets/avatar.png'),
    );
  }
}
Widget _buildMenuIcon(BuildContext context,
    {required IconData icon, required String label, required VoidCallback onTap}) {
  return GestureDetector(
    onTap: onTap,
    child: Column(
      children: [
        CircleAvatar(
          backgroundColor: Colors.pink.withOpacity(0.1),
          radius: 30,
          child: Icon(icon, color: Colors.pink, size: 28),
        ),
        SizedBox(height: 8),
        Text(
          label,
          style: TextStyle(fontSize: 14, fontWeight: FontWeight.w600),
        ),
      ],
    ),
  );
}

Widget _buildOrderStatusTileWithIcon(
    BuildContext context, IconData icon, String label, Widget destinationPage) {
  return GestureDetector(
    onTap: () {
      Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => destinationPage),
      );
    },
    child: Column(
      children: [
        CircleAvatar(
          backgroundColor: Colors.pink.withOpacity(0.1),
          radius: 25,
          child: Icon(icon, color: Colors.pink, size: 24),
        ),
        SizedBox(height: 8),
        Text(
          label,
          style: TextStyle(fontSize: 14, fontWeight: FontWeight.w600),
        ),
      ],
    ),
  );
}

String formatDate(String isoDate) {
  if (isoDate.isEmpty) return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà";
  
  DateTime date = DateTime.parse(isoDate);
  List<String> monthNames = [
    "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
    "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
  ];
  
  return "${date.day} ${monthNames[date.month - 1]} ${date.year}";
}

@override
Widget build(BuildContext context) {
  final formatter = new NumberFormat("#,##0.00", "th");
  return Scaffold(
    appBar: AppBar(
      backgroundColor: Colors.pink,
      elevation: 0,
      automaticallyImplyLeading: false,
    ),
    body: currentUserRole == null
        ? const Center(child: CircularProgressIndicator())
        : ListView(
            children: [
              // ‚úÖ ‡πÉ‡∏ä‡πâ Stack ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Positioned ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
              Stack(
                children: [
                  // üîπ ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                  Container(
                    color: Colors.pink,
                    padding: const EdgeInsets.all(16),
                    child: Row(
                      children: [
                        _displayProfileImage(),
                        const SizedBox(width: 20),
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              username,
                              style: const TextStyle(
                                fontSize: 24,
                                fontWeight: FontWeight.bold,
                                color: Colors.white,
                              ),
                            ),
                            GestureDetector(
                              onTap: () {
                                Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (context) => ProfilesettingScreen(),
                                  ),
                                );
                              },
                              child: const Text(
                                '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå',
                                style: TextStyle(
                                  color: Colors.white70,
                                  decoration: TextDecoration.underline,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                  // ‚úÖ ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô Settings ‡∏ó‡∏µ‡πà‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô
                  Positioned(
                    right: 10, // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏ß‡∏≤
                    child: GestureDetector(
                      onTap: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(builder: (context) => const SettingScreen()),
                        );
                      },
                      child: Container(
                        padding: const EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          color: Colors.white.withOpacity(0.3), // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÅ‡∏™‡∏á
                        ),
                        child: const Icon(
                          Icons.settings,
                          size: 30,
                          color: Colors.white,
                        ),
                      ),
                    ),
                  ),
                ],
              ),

              const Divider(),

              // üîπ ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        const Text(
                          '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠',
                          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                        ),
                        GestureDetector(
                          onTap: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(builder: (context) => OrderHistoryPage()),
                            );
                          },
                          child: Text(
                            '‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ >',
                            style: TextStyle(
                                fontSize: 14, color: Colors.grey),
                          ),
                        ),
                      ],
                    ),
                    SizedBox(height: 10),
                  ],
                ),
              ),
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á UI





                //role Admin

           
if (currentUserRole == 'Admin') ...[
  Row(
    mainAxisAlignment: MainAxisAlignment.center, // ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
    
    children: [
      SizedBox(width: 7),
      // ‡πÄ‡∏°‡∏ô‡∏π "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞"
      _buildMenuIcon(
        context,
        icon: Icons.payment,
        label: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞',
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(builder: (context) => ToPayOrdersPage()),
          );
        },
      ),
      SizedBox(width: 30),
      _buildMenuIcon(
        context,
        icon: Icons.done_all,
        label: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(builder: (context) => SuccessAndReviewPage(userEmail: '',)),
          );
        },
      ),
      SizedBox(width: 30),
      _buildMenuIcon(
        context,
        icon: Icons.done_all,
        label: '‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(builder: (context) => PaymentCompletedPage()),
          );
        },
      ),
      SizedBox(width: 30),
      //‡πÄ‡∏°‡∏ô‡∏π "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
      _buildMenuIcon(
        context,
        icon: Icons.done_all,
        label: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
        onTap: () {
          Navigator.push(
            context,
            MaterialPageRoute(builder: (context) => OrdersCancelPage()),
          );
        },
      ),

    ],
  ),

  Divider(),
  ListTile(
    title: Text('‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'),
    trailing: Icon(Icons.manage_accounts), // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô manage_accounts
    onTap: () {
      Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => UserListPage()),
      );
    },
  ),
  Divider(),
  ListTile(
    title: Text('‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡∏´‡∏¥‡πâ‡∏ß'),
    trailing: Icon(Icons.request_page), // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô request_page
    onTap: () {
      Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => RequirementPage()),
      );
    },
  ),
  Divider(),
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà "‡∏ô‡∏±‡∏Å‡∏´‡∏¥‡πâ‡∏ß‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô"
  ListTile(
    title: Text('‡∏ô‡∏±‡∏Å‡∏´‡∏¥‡πâ‡∏ß‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô'),
    trailing: Icon(Icons.person_search), // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô person_search
    onTap: () {
      Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => RecipientsScreen()),
      );
    },
  ),
],





// ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Role User
if (currentUserRole == 'User')

  Padding(
    padding: const EdgeInsets.all(16.0),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          '‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        SizedBox(height: 10),
        // Row ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            // ‡πÄ‡∏°‡∏ô‡∏π "‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞"
_buildMenuIcon(
  context,
  icon: Icons.list_alt,
  label: '‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞',
  onTap: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => PendingPaymentPage(
          userEmail: '', // ‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
          initialTabIndex: 0, // Tab "‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞"
        ),
      ),
    );
  },
),
_buildMenuIcon(
  context,
  icon: Icons.local_shipping,
  label: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á',
  onTap: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => PendingPaymentPage(
          userEmail: '', // ‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
          initialTabIndex: 1, // Tab "‡∏£‡∏≠‡∏à‡∏±‡∏î‡∏™‡πà‡∏á"
        ),
      ),
    );
  },
),
_buildMenuIcon(
  context,
  icon: Icons.inbox,
  label: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
  onTap: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => PendingPaymentPage(
          userEmail: '', // ‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
          initialTabIndex: 2, // Tab "‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö"
        ),
      ),
    );
  },
),
_buildMenuIcon(
  context,
  icon: Icons.star_border,
  label: '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô',
  onTap: () {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => PendingPaymentPage(
          userEmail: '', // ‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
          initialTabIndex: 3, // Tab "‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"
        ),
      ),
    );
  },
),
          ],
        ),
        Divider(),
        // ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        Text(
          '‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        SizedBox(height: 10),
        Container(
          padding: EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(8),
            boxShadow: [
              BoxShadow(
                color: Colors.grey.withOpacity(0.3),
                spreadRadius: 2,
                blurRadius: 5,
              ),
            ],
          ),
          child: GestureDetector(
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => RegisrecipientsScreen(),
                ),
              );
            },
            child: Row(
              children: [
                Icon(Icons.map, color: Colors.pink, size: 30),
                SizedBox(width: 10),
                Text(
                  '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡∏´‡∏¥‡πâ‡∏ß',
                  style: TextStyle(fontSize: 16),
                ),
              ],
            ),
          ),
        ),
      ],
    ),
  ),

//role Recipient
if (currentUserRole == 'Recipient') ...[
  Padding(
    padding: const EdgeInsets.all(16.0),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
Row(
  mainAxisAlignment: MainAxisAlignment.spaceAround,
  children: [
    _buildOrderStatusTileWithIcon(
      context,
      Icons.pending_actions, // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á"
      '‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á',
      OrdersPage(), // ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
    ),
    _buildOrderStatusTileWithIcon(
      context,
      Icons.local_shipping, // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á"
      '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á',
      ShippingPage(), // ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
    ),
    _buildOrderStatusTileWithIcon(
      context,
      Icons.check_circle, // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
      '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      ReceivingPage(), // ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
    ),
    _buildOrderStatusTileWithIcon(
      context,
      Icons.star_border, // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"
      '‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô',
      ReviewPage(), // ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
    ),


  ],
),
SizedBox(height: 20), // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
Padding(
  padding: const EdgeInsets.symmetric(horizontal: 16.0),
  child: GestureDetector(
    onTap: () {
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => IncomeRecipient(firebaseUid: user!.uid, endpoint: '',),
        ),
      );
    },
    child: Container(
      width: double.infinity, // ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.2),
            spreadRadius: 2,
            blurRadius: 5,
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.center, // ‚úÖ ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
        mainAxisAlignment: MainAxisAlignment.center,  // ‚úÖ ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
        children: [
          Text(
            '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô',
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            textAlign: TextAlign.center, // ‚úÖ ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
          ),
          SizedBox(height: 5),
          Text(
            (firstShopDate.isNotEmpty && lastShopDate.isNotEmpty)
                ? '${formatDate(firstShopDate)} - ${formatDate(lastShopDate)}'
                : '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
            style: TextStyle(fontSize: 14, color: Colors.grey),
            textAlign: TextAlign.center, // ‚úÖ ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
          ),
          SizedBox(height: 10),
          Text(
            '${formatter.format(totalIncome)}',
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: totalIncome > 0 ? Colors.pink : Colors.grey,
            ),
            textAlign: TextAlign.center, // ‚úÖ ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
          ),
        ],
      ),
    ),
  ),
),


      ],
    ),
  ),
],


              ],
            ),
    );
  }
}
